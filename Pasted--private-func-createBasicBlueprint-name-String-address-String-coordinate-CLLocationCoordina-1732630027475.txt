
    private func createBasicBlueprint(name: String, address: String, coordinate: CLLocationCoordinate2D) {
        let newBlueprint = Blueprint()
        newBlueprint.id = UUID().uuidString
        newBlueprint.name = name
        newBlueprint.latitude = coordinate.latitude
        newBlueprint.longitude = coordinate.longitude
        newBlueprint.address = address
        newBlueprint.category = "Unknown"
        
        // Save the basic blueprint
        self.saveBlueprintToFirebase(newBlueprint)
    }
    
   
    private func populateBlueprint(_ blueprint: Blueprint, placeId: String) {
        isLoading = true

        let apiKey = "AIzaSyBgxzzgcT_9nyhz1D_JtfG7gevRUKQ5Vbs" // Replace with your actual API key
        let fields = "name,rating,formatted_phone_number,website,opening_hours"
        let urlString = "https://maps.googleapis.com/maps/api/place/details/json?place_id=\(placeId)&fields=\(fields)&key=\(apiKey)"
        
        guard let url = URL(string: urlString) else {
            self.isLoading = false
            self.alertMessage = "Invalid URL."
            return
        }

        let task = URLSession.shared.dataTask(with: url) { data, response, error in
            DispatchQueue.main.async {
                self.isLoading = false
                if let error = error {
                    self.alertMessage = "Error fetching place details: \(error.localizedDescription)"
                    return
                }
                guard let data = data else {
                    self.alertMessage = "No data received."
                    return
                }
                do {
                    let decoder = JSONDecoder()
                    print("Place Details API Response: \(String(data: data, encoding: .utf8) ?? "No data")")
                    let placeDetailsResponse = try decoder.decode(GooglePlaceDetailsResponse.self, from: data)
                    let placeDetails = placeDetailsResponse.result
                    // Populate the Blueprint with additional data
                    blueprint.phoneNumber = placeDetails.formatted_phone_number ?? ""
                    blueprint.websiteURL = placeDetails.website ?? ""
                   // blueprint.rating = placeDetails.rating ?? 0.0
                    blueprint.openingHours = placeDetails.opening_hours?.weekday_text ?? []
                    // Save the Blueprint to Firebase
                    self.saveBlueprintToFirebase(blueprint)
                } catch {
                    self.alertMessage = "Error parsing data: \(error.localizedDescription)"
                }
            }
        }
        task.resume()
    }
    
    private func saveBlueprintToFirebase(_ blueprint: Blueprint) {
        let db = Firestore.firestore()
        let blueprintsRef = db.collection("blueprints")
        let blueprintData = blueprint.toDictionary()
        blueprintsRef.document(blueprint.id).setData(blueprintData) { error in
            DispatchQueue.main.async {
                self.isLoading = false
                if let error = error {
                    self.alertMessage = "Failed to save Blueprint: \(error.localizedDescription)"
                } else {
                    // Only set self.blueprint if the save was successful
                    self.blueprint = blueprint
                }
            }
        }
    }
    