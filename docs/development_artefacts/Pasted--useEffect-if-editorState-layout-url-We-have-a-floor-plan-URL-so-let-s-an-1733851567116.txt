  useEffect(() => {
    if (editorState.layout.url) {
      // We have a floor plan URL, so let's analyze it with Gemini
      analyzeFloorPlanWithGemini(editorState.layout.url);
    }
  }, [editorState.layout.url]);

  // ADD THIS FUNCTION inside your BlueprintEditor component, before return:
  async function analyzeFloorPlanWithGemini(floorPlanUrl: string) {
    if (!floorPlanUrl) return;
    setLoading(true);
    try {
      const base64Image = await convertImageToBase64(floorPlanUrl);
      const projectId = "blueprint-8c1ca";
      const location = "us-central1";
      const model = "gemini-1.5-flash";
      const apiKey = "AlzaSyAsdkTpKJ2lycDVmuUKVzJ4zxaKW9A4-ol";
      const vertexAiEndpoint = `https://${location}-aiplatform.googleapis.com/v1/projects/${projectId}/locations/${location}/publishers/google/models/${model}:predict`;
      const requestBody = {
        instances: [
          {
            image: { bytesBase64Encoded: base64Image },
            prompt:
              "Analyze this floor plan and provide insights about the layout, potential hotspots, and suggestions for improvement.",
          },
        ],
      };
      const response = await fetch(vertexAiEndpoint, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: "Bearer " + apiKey,
        },
        body: JSON.stringify(requestBody),
      });
      if (!response.ok) {
        throw new Error(
          "Gemini analysis request failed: " + response.statusText,
        );
      }
      const analysisData = await response.json();
      setGeminiAnalysis(analysisData.predictions[0].content);
      console.log(
        "Gemini analysis state:",
        analysisData.predictions[0].content,
      );
    } catch (error) {
      console.error("Error:", error);
    } finally {
      setLoading(false);
    }
  }

  async function convertImageToBase64(imageUrl) {
    try {
      const encodedUrl = encodeURI(imageUrl);
      console.log("Fetching image from (encoded):", encodedUrl); // Log the encoded URL
      const response = await fetch(encodedUrl);
      const blob = await response.blob();
      return new Promise((resolve, reject) => {
        const reader = new FileReader();
        reader.onloadend = () => resolve(reader.result.split(",")[1]);
        reader.onerror = reject;
        reader.readAsDataURL(blob);
      });
    } catch (error) {
      console.error("Error fetching image:", error);
      return null; // Or throw the error
    }
  }
